/*
*	"We want you to feel the algorithm"
*/

var FeelgoRythm = function(documentId) {
	var that = this;

	//main babylonjs componets
	this.documentId = documentId;
	this.canvas = undefined;
	this.engine = undefined;
	this.scene = undefined;


	//app variables
	this.model = undefined;
	this.currentGraphTheme = "Rainbowz";
	this.currentSkybox = "alien";
	this.currentGroundTheme = "grey_brick";
	this.currentVertexSize = "medium";
	this.bDisplayGraphValues = false;
	this.bEnableTutorial = false;

	//asset paths
	this.skyboxTexturePath = "textures/skybox/";
	this.groundTexturePath = "textures/ground/";
};

FeelgoRythm.prototype = {

	initCamera: function() {
		this.camera = new BABYLON.ArcRotateCamera("ArcRotCamera",
					 1.5319001498871874, 1.3278950757638162, 180.04261169410753,
					 new BABYLON.Vector3(0, 0, 0), this.scene);
		
		this.camera.lowerRadiusLimit = 20;
		this.camera.upperRadiusLimit = 550;
		this.camera.upperBetaLimit = 0.483 * Math.PI;
		this.camera.maxZ = 2000;

		this.camera.attachControl(this.canvas, false);
	},

	initBabylon: function() {

		this.canvas = document.getElementById(this.documentId);
		this.engine = new BABYLON.Engine(this.canvas, true);
		this.scene = new BABYLON.Scene(this.engine);

		window.addEventListener("resize", function () {
				that.engine.resize();	
		});	
	},

	loadTextures: function() {

		this.loadGraphThemeMaterials();
		this.loadSkyboxTextureThemes();
		this.loadGroundThemes();
	},

	initScene: function() {
		
		this.initCamera();
		this.initGround();
		this.initDefaultLights();
		this.initSkyBox();

		//resize loop for web browser
		this.engine.runRenderLoop(function() {
			that.scene.render();
		});		
	},

	initGround: function() {
		var ground = new BABYLON.Mesh.CreateGround( "ground", 1000, 1000, 8, this.scene);
		ground.material = this.scene.getMaterialByID("mat_" + this.currentGroundTheme);
	}, 

	initTiledGroundGround: function() {

		// Part 1 : Creation of Tiled Ground
		// Parameters
		var xmin = -500;
		var zmin = -500;
		var xmax =  500;
		var zmax =  500;
		var precision = {
		    "w" : 16,
		    "h" : 16
		};
		var subdivisions = {
		    'h' : 4,
		    'w' : 4
		};

		var tiledGround = new BABYLON.Mesh.CreateTiledGround("tiledGround", xmin, zmin, xmax, zmax, 
															subdivisions, precision, this.scene);		 

		//tiledGround.material = this.scene.getMaterialByID("mat_" + this.currentGroundTheme);


		 tiledGround.material = this.scene.multiMaterials[0];
		
		 // Needed variables to set subMeshes
		 var verticesCount = tiledGround.getTotalVertices();
		 var tileIndicesLength = tiledGround.getIndices().length / (subdivisions.w * subdivisions.h);
		 
		 // Set subMeshes of the tiled ground
		 tiledGround.subMeshes = [];
		 var base = 0;
		 for (var row = 0; row < subdivisions.h; row++) {
		     for (var col = 0; col < subdivisions.w; col++) {
		         tiledGround.subMeshes.push(new BABYLON.SubMesh(row%2 ^ col%2, 0, verticesCount, base , tileIndicesLength, tiledGround));
		         base += tileIndicesLength;
		     }
		 }
	},

	initSkyBox: function() {

		var skybox = BABYLON.Mesh.CreateBox("skybox", 2000.0, this.scene);
		skybox.material = this.scene.getMaterialByID("mat_" + this.currentSkybox);
		skybox.infiniteDistance = true;
	},

	loadGraphThemeMaterials: function() {

		for(var theme = 0; theme < GraphThemes.length; theme++) {
			var currTheme = GraphThemes[theme];
			for(var color in Palettes[currTheme.name]) {
				var mat = new BABYLON.StandardMaterial( currTheme.name + "_"+ color.toString(), this.scene);
				mat.diffuseColor = Palettes[currTheme.name][color];
			}
		}
	},

	loadSkyboxTextureThemes: function() {
		
		for (var theme = 0; theme < SkyBoxThemes.length; theme++) {
			var currSkyboxTexture = SkyBoxThemes[theme];
			var skyboxMaterial = new BABYLON.StandardMaterial("mat_" + currSkyboxTexture.name, this.scene);
			skyboxMaterial.backFaceCulling = false;

			skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
			skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);

			skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture(
											this.skyboxTexturePath + currSkyboxTexture.path, this.scene);

			skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;

		};
	},

	loadGroundThemes: function() {
		for (var theme = 0; theme < GroundThemes.length; theme++) {
			var currGroundTheme = GroundThemes[theme];
			var groundMaterial = new BABYLON.StandardMaterial("mat_" + currGroundTheme.name, this.scene);
			groundMaterial.diffuseTexture = new BABYLON.Texture(this.groundTexturePath + currGroundTheme.filename, this.scene);
		}


		var whiteMaterial = new BABYLON.StandardMaterial("ground_white", this.scene);
		 whiteMaterial.diffuseColor = new BABYLON.Color3(1, 1, 1);

		 var blackMaterial = new BABYLON.StandardMaterial("ground_black", this.scene);
		 blackMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);

		 // Create Multi Material
		 var multimat = new BABYLON.MultiMaterial("ground_mat", this.scene);
		 multimat.subMaterials.push(whiteMaterial);
		 multimat.subMaterials.push(blackMaterial);
	},

	initDefaultLights: function() {
		var light = new BABYLON.HemisphericLight("light_" + this.scene.lights.length,
		new BABYLON.Vector3(0, 1, 0), this.scene);
		light.intensity = 0.7;
		this.lightcount++;
	},

	initGraphModel: function() {
		var index = this._getIndexOfObjectArray(this.currentGraphTheme, GraphThemes);
		this.model = new GraphModel( this.scene, 0, GraphThemes[index].colortheme, this.currentVertexSize);
		this.model.initMoveFunction();
	},

	updateSkybox: function(index) {
		var newSkyBoxTheme = SkyBoxThemes[index];
		var skyboxMesh = this.scene.getMeshByName("skybox");
		skyboxMesh.material = this.scene.getMaterialByID("mat_" + newSkyBoxTheme.name);
	},

	updateGround: function(index) {
		console.log(index);


		var newGroundTheme = GroundThemes[index];
		console.log(newGroundTheme);

		var groundMesh = this.scene.getMeshByName("ground");
		console.log(this.scene.getMaterialByID("mat_" + newGroundTheme.name));
		groundMesh.material = this.scene.getMaterialByID("mat_" + newGroundTheme.name);
	},
	
	dumpDebug: function() {
		console.log(this);
	},

	_getIndexOfObjectArray: function(name, objArray){
		for(var i = 0; i < objArray.length; i++) {
				if(objArray[i].name == name) return i;
		}
		return -1;
	}
	
};
